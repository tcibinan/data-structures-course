package org.flaxo.structures;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


/**
 * ????????? ?????? - ??? ????? ?????.
 *
 * ????? ? ?????? ??????? - ????????????.
 */
public class Range {



    private final int right;
    private final int left;

    private Range(final int left, final int right){
        this.left = left;
        this.right = right;
    }



    /**
     * ?????????? ??? ????? ????? ??????????? ????? ? ?????? ?????????.
     *
     * ??????? ?????????? ? ???.
     *
     * @param left ????? ??????? ????.
     * @param right ?????? ??????? ????.
     * @return ??? ????? ????? ????? ? ?????? ????????? ????????????.
     */
    public static Range between(final int left, final int right) {
        // todo: ?????????? ???????? ?????????? ??????
        if(left > right){
            throw new IllegalArgumentException("a lower bound is greater than an upper bound");
        }
        return new Range(left,right);
    }

    /**
     * ?????????? ???????? ????? ??????? ????.
     *
     * @return ???????? ????? ??????? ????.
     */
    public int leftBound() {
        // todo: ?????????? ???????? ?????????? ??????
        return left;
    }

    /**
     * ?????????? ???????? ?????? ??????? ????.
     *
     * @return ???????? ?????? ??????? ????.
     */
    public int rightBound() {
        // todo: ?????????? ???????? ?????????? ??????
        return right;
    }

    /**
     * ?????????, ???????? ?? ??????? ??? ?????????????? ???????????.
     *
     * @param other ???, ??????? ???????????????? ????????? ??????? ????? ????????.
     * @return true, ???? ?????? ??????? ???????? ???? ??????,
     * ??? ????? ??????? ???????????, ????? - false.
     */
    public boolean isBefore(final Range other) {
        // todo: ?????????? ???????? ?????????? ??????
        return this.right < other.left;
    }

    /**
     * ?????????, ???????? ?? ??????? ??? ????????? ????? ???????????.
     *
     * @param other ???, ??????? ???????????????? ???????????? ????????.
     * @return true, ???? ????? ??????? ???????? ???? ??????,
     * ??? ?????? ??????? ???????????, ????? - false.
     */
    public boolean isAfter(final Range other) {
        // todo: ?????????? ???????? ?????????? ??????
        return this.left > other.right;
    }

    /**
     * ?????????, ???????????? ?? ??????? ? ?????????? ????.
     *
     * ?????????? ?????? ????? ???????? ?? ???????????.
     *
     * @param other ???, ? ??????? ?????????? ????????? ???????????.
     * @return true, ???? ???? ????????????, ????? - false.
     */
    public boolean isConcurrent(final Range other) {
        // todo: ?????????? ???????? ?????????? ??????
        return !(this.isAfter(other) || this.isBefore(other));

    }

    /**
     * ?????????, ????????? ?? ?????????? ??? ? ???????? ????????.
     *
     * @param value ???, ???????????????? ??????????? ? ???????? ????????.
     * @return true, ???? ????? ??????? ??????????? ???? ?????? ????? ??????? ????????,
     * ? ?????? ??????? ??????????? ???? ?????? ?????? ??????? ????????, ????? - false.
     */
    public boolean contains(final int value) {
        // todo: ?????????? ???????? ?????????? ??????
        return value >= this.left && value <= this.right;
    }

    /**
     * ?????????? ?????? ????? ????.
     *
     * ??????? ???? ?????????? ? ??????.
     *
     * @return ?????? ?????, ???????? ? ???.
     */
    public List<Integer> asList() {
        // todo: ?????????? ???????? ?????????? ??????
        List<Integer> list = new ArrayList<>(this.right - this.left + 1);
        for(int i = this.left; i <= this.right; i++)
            list.add(i);
        return list;
    }

    /**
     * ?????????? ???????? ?? ??????, ???????? ? ???.
     *
     * ??????? ???? ?????????? ? ????????.
     *
     * @return ???????? ?? ??????, ???????? ? ???
     */
    public Iterator<Integer> asIterator() {
        // todo: ?????????? ???????? ?????????? ??????
        return this.asList().iterator();
    }
}

