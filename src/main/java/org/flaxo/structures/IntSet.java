package org.flaxo.structures;
import java.util.List;
import java.util.ArrayList;
/**
 * ????????? ?????? - ????????? ??????????????? ????? ?????.
 */
public class IntSet {

    private List<Integer> mask;


    private IntSet(final int... values) {
        mask = new ArrayList<Integer>();
        for(int i = 0;i < 31000000; i++){
            mask.add(0);
        }
        for(int i = 0;i < values.length; i++){
            int x = values[i];
            mask.set(x/32,mask.get(x/32)|(1<<x%32));
        }
    }


    /**
     * ?????????? ?????? ?????????.
     *
     * @return ?????? ?????????.
     */
    public static IntSet empty() {
        return new IntSet();
    }

    /**
     * ?????????? ????????? ?????????? ?????.
     *
     * @param values ?????, ?? ??????? ????? ???????? ?????????.
     * @return ????????? ?????????? ?????.
     */
    public static IntSet of(final int... values) {
        return new IntSet(values);
    }

    /**
     * ????????? ????? ?? ?????????.
     *
     * @param value ?????, ??????? ?????????? ???????? ?? ?????????.
     */
    public void add(final int value) {
        mask.set(value / 32, mask.get(value / 32) | (1 << value % 32));
    }

    /**
     * ??????? ????? ?? ?????????.
     *
     * @param value ?????, ??????? ?????????? ??????? ?? ?????????.
     */
    public void remove(final int value) {
        if(this.contains(value)){
            mask.set(value / 32, mask.get(value / 32) - (1 << (value % 32)));
        }
    }

    /**
     * ?????????, ?????????? ?? ???????? ?? ?????????.
     *
     * @param value ?????, ??????? ???????? ?? ????????? ?????????? ?????????.
     * @return true ???? ????????? ???????? ????????, ????? - false.
     */
    public boolean contains(final int value) {
        return (mask.get(value / 32) & (1 << (value % 32))) != 0;
    }

    /**
     * ?????????? ?????? ?????????.
     *
     * @return ?????? ?????????.
     */
    public int size() {
        int size = 0;
        for(int i = 0 ;i < 31000000; i++){
            int x = this.mask.get(i);
            if(x > 0){
                for(int j = 0;j < 32;j++){
                    if((x >> j & 1) == 1)
                        size++;
                }
            }
        }
        return size;
    }

    /**
     * ?????????? ????????? ???? ????????? ????????
     * ? ??????????? ????????.
     *
     * ???????? ??????????? ????????.
     *
     * @param other ?????????, ? ??????? ?????????? ???????? ???????? ???????????.
     * @return ?????????, ?????????? ??????????? ??????????? ???? ????????.
     */
    public IntSet union(final IntSet other) {
        IntSet s = new IntSet();
        s.mask = this.mask;
        for(int i = 0 ; i < 31000000; i++)
            if(s.mask.get(i) != 0 || other.mask.get(i) != 0)
                s.mask.set(i, s.mask.get(i) | other.mask.get(i));
        return s;
    }

    /**
     * ?????????? ????????? ????? ????????? ????????
     * ? ??????????? ????????.
     *
     * ???????? ??????????? ????????.
     *
     * @param other ?????????, ? ??????? ?????????? ???????? ???????? ???????????.
     * @return ?????????, ?????????? ??????????? ??????????? ???? ????????.
     */
    public IntSet intersection(final IntSet other) {
        IntSet s = new IntSet();
        s.mask = this.mask;
        for(int i = 0 ; i < 31000000; i++)
            if(s.mask.get(i) != 0 && other.mask.get(i) != 0)
                s.mask.set(i, s.mask.get(i) & other.mask.get(i));
        return s;
    }

    /**
     * ?????????? ????????? ?????????? ????????? ????????
     * ? ??????????? ????????.
     *
     * ???????? ???????????? ??? ??? ???????????.
     *
     * @param other ?????????, ? ??????? ?????????? ???????? ?????? ????????.
     * @return ?????????, ???????? ???????????? ???? ?????? ? ??????, ????
     * ?????? ?? ?????? ?????????.
     */
    public IntSet difference(final IntSet other) {
        IntSet s = new IntSet();
        s.mask = this.mask;
        for(int i = 0 ; i < 31000000; i++)
            if(s.mask.get(i) != 0 && other.mask.get(i) != 0)
                s.mask.set(i, s.mask.get(i) ^ other.mask.get(i));
        return s;
    }

    /**
     * ?????????? ????????? ????????? ???????? ?????????,
     * ??????? ??? ? ?????????? ?????????.
     *
     * ???????? ????????? ????????.
     *
     * @param other ?????????, ??????? ?????????? ??????? ?? ????????.
     * @return ?????????, ?????????? ??????????? ????????? ???? ????????.
     */
    public IntSet minus(final IntSet other) {
        IntSet s = this.union(other);
        return s.difference(other);
    }

    /**
     * ?????????, ???????? ?? ??????? ????????? ????????????? ???????????.
     *
     * @param other ?????????, ??? ???????? ?????????? ?????????, ?????? ?? ?
     *              ???? ??????? ?????????
     * @return true, ???? ??????? ?????????, ???????? ????????????? ???????????,
     * ????? - false
     */
    public boolean isSubsetOf(final IntSet other) {
        for(int i = 0;i < 31000000; i++){
            if((this.mask.get(i) | other.mask.get(i)) != other.mask.get(i))
                return false;
        }
        return true;
    }

}